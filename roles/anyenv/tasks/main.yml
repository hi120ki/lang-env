- name: check anyenv installed
  stat:
    path: ~/.anyenv
  register: check_anyenv
  become: no
- block:
    - name: apt update
      apt:
        update_cache: yes
    - name: "apt install pyenv lib"
      apt:
        pkg:
          - make
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - curl
          - llvm
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libffi-dev
          - liblzma-dev
    - name: git clone anyenv
      shell: git clone https://github.com/anyenv/anyenv ~/.anyenv
      become: no
  when:
    - not check_anyenv.stat.exists

- name: add PATH ~/.zshrc
  become: no
  blockinfile:
    dest: ~/.zshrc
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK anyenv"
    content: |
      export PATH="$HOME/.anyenv/bin:$PATH"
      eval "$(anyenv init - zsh)"
- name: add PATH ~/.config/fish/config.fish
  become: no
  blockinfile:
    dest: ~/.config/fish/config.fish
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK anyenv"
    content: |
      set -x PATH ~/.anyenv/bin $PATH
      anyenv init - | source
- name: add PATH ~/.bashrc
  become: no
  blockinfile:
    dest: ~/.bashrc
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK anyenv"
    content: |
      export PATH="$HOME/.anyenv/bin:$PATH"
      eval "$(anyenv init - bash)"

- name: check anyenv_install installed
  stat:
    path: ~/.config/anyenv
  register: check_anyenv_install
  become: no
- block:
    - name: anyenv install --init
      shell: ~/.anyenv/bin/anyenv install --force-init
      become: no
  when:
    - not check_anyenv_install.stat.exists

- name: check anyenv_update installed
  stat:
    path: ~/.anyenv/plugins/anyenv-update
  register: check_anyenv_update
  become: no
- block:
    - name: mkdir -p ~/.anyenv/plugins
      shell: mkdir -p ~/.anyenv/plugins
      become: no
    - name: git clone anyenv-update
      shell: git clone https://github.com/znz/anyenv-update.git ~/.anyenv/plugins/anyenv-update
      become: no
  when:
    - not check_anyenv_update.stat.exists
- name: anyenv update
  shell: ~/.anyenv/bin/anyenv update
  become: no

- block:
    - name: check pyenv installed
      stat:
        path: ~/.anyenv/envs/pyenv
      register: check_pyenv
      become: no
    - block:
        - name: anyenv install pyenv
          shell: ~/.anyenv/bin/anyenv install pyenv
          become: no
      when:
        - not check_pyenv.stat.exists
    - block:
        - name: check python3 installed
          stat:
            path: ~/.anyenv/envs/pyenv/versions/{{ python3_version }}
          register: check_python3
          become: no
        - block:
            - name: install python3
              shell: source ~/.bashrc ; pyenv install {{ python3_version }}
              become: no
              args:
                executable: /bin/bash
          when:
            - not check_python3.stat.exists
        - name: pip install
          shell: ~/.anyenv/envs/pyenv/versions/{{ python3_version }}/bin/python -m pip install -U pip
          become: no
        - name: pip install libs
          shell: ~/.anyenv/envs/pyenv/versions/{{ python3_version }}/bin/python -m pip install -U {{ item }}
          become: no
          ignore_errors: True
          with_items:
            - "{{ python3_libs }}"
      when:
        - python3_install
    - block:
        - name: check python2 installed
          stat:
            path: ~/.anyenv/envs/pyenv/versions/{{ python2_version }}
          register: check_python2
          become: no
        - block:
            - name: install python2
              shell: source ~/.bashrc ; pyenv install {{ python2_version }}
              become: no
              args:
                executable: /bin/bash
          when:
            - not check_python2.stat.exists
        - name: pip install
          shell: ~/.anyenv/envs/pyenv/versions/{{ python2_version }}/bin/python -m pip install -U pip
          become: no
        - name: pip install libs
          shell: ~/.anyenv/envs/pyenv/versions/{{ python2_version }}/bin/python -m pip install -U {{ item }}
          become: no
          ignore_errors: True
          with_items:
            - "{{ python2_libs }}"
      when:
        - python2_install
    - name: pyenv global
      shell: source ~/.bashrc ; pyenv global {{ python_global_version }}
      become: no
      args:
        executable: /bin/bash
    - name: edit ~/.bashrc
      become: no
      blockinfile:
        dest: ~/.bashrc
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK python"
        content: |
          alias pipinit='pip install -U pip ; pip install -U pipdeptree black pycryptodome requests numpy sympy scipy gmpy2 matplotlib bandit'
          alias pipreq='pip install -r requirements.txt'
          alias venv='source .venv/bin/activate.fish'
          alias venvinit='rm -rf .venv ; python -m venv .venv'
          alias venvsetup='venvinit ; venv ; pip install -U pip ; pipreq'
    - name: edit ~/.zshrc
      become: no
      blockinfile:
        dest: ~/.zshrc
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK python"
        content: |
          alias pipinit='pip install -U pip ; pip install -U pipdeptree black pycryptodome requests numpy sympy scipy gmpy2 matplotlib bandit'
          alias pipreq='pip install -r requirements.txt'
          alias venv='source .venv/bin/activate.fish'
          alias venvinit='rm -rf .venv ; python -m venv .venv'
          alias venvsetup='venvinit ; venv ; pip install -U pip ; pipreq'
    - name: edit ~/.config/fish/config.fish
      become: no
      blockinfile:
        dest: ~/.config/fish/config.fish
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK python"
        content: |
          alias pipinit 'pip install -U pip ; pip install -U pipdeptree black pycryptodome requests numpy sympy scipy gmpy2 matplotlib bandit'
          alias pipreq 'pip install -r requirements.txt'
          alias venv 'source .venv/bin/activate.fish'
          alias venvinit 'rm -rf .venv ; python -m venv .venv'
          alias venvsetup 'venvinit ; venv ; pip install -U pip ; pipreq'
  when:
    - python_install

- block:
    - name: check nodenv installed
      stat:
        path: ~/.anyenv/envs/nodenv
      register: check_nodenv
      become: no
    - block:
        - name: anyenv install nodenv
          shell: ~/.anyenv/bin/anyenv install nodenv
          become: no
      when:
        - not check_nodenv.stat.exists
    - name: check nodejs installed
      stat:
        path: ~/.anyenv/envs/nodenv/versions/{{ nodejs_version }}
      register: check_nodejs
      become: no
    - block:
        - name: install nodejs
          shell: source ~/.bashrc ; nodenv install {{ nodejs_version }}
          become: no
          args:
            executable: /bin/bash
      when:
        - not check_nodejs.stat.exists
    - name: npm install
      shell: source ~/.bashrc ; nodenv shell {{ nodejs_version }} ; npm i -g npm yarn
      become: no
      args:
        executable: /bin/bash
    - name: npm install libs
      shell: source ~/.bashrc ; nodenv shell {{ nodejs_version }} ; npm i -g {{ item }}
      become: no
      args:
        executable: /bin/bash
      ignore_errors: True
      with_items:
        - "{{ nodejs_libs }}"
    - name: nodenv global
      shell: source ~/.bashrc ; nodenv global {{ nodejs_global_version }}
      become: no
      args:
        executable: /bin/bash
    - name: edit ~/.bashrc
      become: no
      blockinfile:
        dest: ~/.bashrc
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK nodejs"
        content: |
          alias nup='npm i -g npm yarn ; npm update -g ; yarn global upgrade ; npm cache verify ; yarn cache clean'
    - name: edit ~/.zshrc
      become: no
      blockinfile:
        dest: ~/.zshrc
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK nodejs"
        content: |
          alias nup='npm i -g npm yarn ; npm update -g ; yarn global upgrade ; npm cache verify ; yarn cache clean'
    - name: edit ~/.config/fish/config.fish
      become: no
      blockinfile:
        dest: ~/.config/fish/config.fish
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK nodejs"
        content: |
          alias nup 'npm i -g npm yarn ; npm update -g ; yarn global upgrade ; npm cache verify ; yarn cache clean'
  when:
    - nodejs_install

- block:
    - name: check goenv installed
      stat:
        path: ~/.anyenv/envs/goenv
      register: check_goenv
      become: no
    - block:
        - name: anyenv install goenv
          shell: ~/.anyenv/bin/anyenv install goenv
          become: no
      when:
        - not check_goenv.stat.exists
    - name: check go installed
      stat:
        path: ~/.anyenv/envs/goenv/versions/{{ golang_version }}
      register: check_go
      become: no
    - block:
        - name: install go
          shell: source ~/.bashrc ; goenv install {{ golang_version }}
          become: no
          args:
            executable: /bin/bash
      when:
        - not check_go.stat.exists
    - name: go install libs
      shell: source ~/.bashrc ; goenv shell {{ golang_version }} ; go install {{ item }}
      become: no
      args:
        executable: /bin/bash
      ignore_errors: True
      with_items:
        - "{{ golang_libs }}"
    - name: goenv global
      shell: source ~/.bashrc ; goenv global {{ golang_global_version }}
      become: no
      args:
        executable: /bin/bash
  when:
    - golang_install

- block:
    - name: check rbenv installed
      stat:
        path: ~/.anyenv/envs/rbenv
      register: check_rbenv
      become: no
    - block:
        - name: anyenv install rbenv
          shell: ~/.anyenv/bin/anyenv install rbenv
          become: no
      when:
        - not check_rbenv.stat.exists
    - name: check ruby installed
      stat:
        path: ~/.anyenv/envs/rbenv/versions/{{ ruby_version }}
      register: check_ruby
      become: no
    - block:
        - name: install ruby
          shell: source ~/.bashrc ; rbenv install {{ ruby_version }}
          become: no
          args:
            executable: /bin/bash
      when:
        - not check_ruby.stat.exists
    - name: gem update
      shell: source ~/.bashrc ; rbenv shell {{ ruby_version }} ; gem update --system
      become: no
      args:
        executable: /bin/bash
    - name: gem install libs
      shell: source ~/.bashrc ; rbenv shell {{ ruby_version }} ; gem install {{ item }}
      become: no
      args:
        executable: /bin/bash
      ignore_errors: True
      with_items:
        - "{{ ruby_libs }}"
    - name: rbenv global
      shell: source ~/.bashrc ; rbenv global {{ ruby_global_version }}
      become: no
      args:
        executable: /bin/bash
  when:
    - ruby_install
